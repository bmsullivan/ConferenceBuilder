// Generated by CoffeeScript 1.6.3
(function() {
  module.exports = {
    create: function(req, res, next) {
      var hasher, userObj;
      if (req.method === 'GET') {
        return res.view();
      }
      hasher = require('password-hash');
      userObj = {
        firstName: req.param('firstName'),
        lastName: req.param('lastName'),
        email: req.param('email'),
        hashedPassword: hasher.generate(req.param('password'))
      };
      if (req.param('password') !== req.param('confirmPassword')) {
        res.locals.flash = {
          error: {
            password: [
              {
                message: 'Password and Confirm Password do not match'
              }
            ]
          }
        };
        res.locals.user = userObj;
        return res.view();
      }
      return User.create(userObj).done(function(err, user) {
        if (err) {
          if (err.ValidationError) {
            res.locals.flash = {
              error: err.ValidationError
            };
            res.locals.user = userObj;
            return res.view();
          }
        }
        return req.logIn(user, function(err) {
          if (err) {
            return res.view();
          }
          return res.redirect('/');
        });
      });
    },
    index: function(req, res, next) {
      return User.find().done(function(err, users) {
        if (err) {
          return next(err);
        }
        res.locals.users = users;
        return res.view();
      });
    },
    update: function(req, res, next) {
      var userObj;
      if (req.method === 'GET') {
        return User.findOneById(req.param('id')).done(function(err, user) {
          if (err) {
            return next(err);
          }
          res.locals.user = user;
          return res.view();
        });
      } else {
        if (req.user.isAdmin) {
          userObj = {
            firstName: req.param('firstName'),
            lastName: req.param('lastName'),
            email: req.param('email'),
            isAdmin: req.param('isAdmin') === 'on'
          };
        } else {
          userObj = {
            firstName: req.param('firstName'),
            lastName: req.param('lastName'),
            email: req.param('email')
          };
        }
        return User.update(req.param('id'), userObj, function(err) {
          if (err) {
            return res.redirect('/user/update/' + req.param('id'));
          }
          return res.redirect('/user');
        });
      }
    },
    find: function(req, res, next) {
      if (!req.user.isAdmin && req.param('id') !== req.user.id.toString()) {
        return res.forbidden('You are not permitted to perform this action.');
      }
      return User.findOneById(req.param('id'), function(err, user) {
        if (err) {
          return next(err);
        }
        res.locals.user = user;
        return res.view();
      });
    }
  };

}).call(this);

/*
//@ sourceMappingURL=UserController.map
*/
