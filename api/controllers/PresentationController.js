// Generated by CoffeeScript 1.6.3
(function() {
  var q;

  q = require('q');

  module.exports = {
    create: function(req, res, next) {
      var pres;
      if (req.method === 'GET') {
        return Track.find().done(function(err, tracks) {
          if (err) {
            return next(err);
          }
          res.locals.tracks = tracks;
          return res.view();
        });
      } else {
        pres = {
          title: req.param('title'),
          trackId: req.param('trackId'),
          abstract: req.param('abstract'),
          level: req.param('level'),
          userId: req.user.id
        };
        return Presentation.create(pres).done(function(err, presentation) {
          if (err) {
            if (err.ValidationError) {
              res.locals.flash = {
                error: err.ValidationError
              };
              res.locals.presentation = pres;
              return res.view();
            }
          }
          res.locals.presentation = presentation;
          return res.view();
        });
      }
    },
    find: function(req, res, next) {
      return Presentation.findOneById(req.param('id'), function(err, presentation) {
        if (err) {
          return next(err);
        }
        res.locals.presentation = presentation;
        return res.view();
      });
    },
    index: function(req, res, next) {
      return Presentation.find().done(function(err, presentations) {
        var pres, promises, _fn, _i, _len;
        if (err) {
          return next(err);
        }
        res.locals.presentations = presentations;
        promises = [];
        _fn = function(pres) {
          return promises.push(Track.findOneById(pres.trackId).then(function(track) {
            return pres.trackName = track.name;
          }).then(function() {
            return User.findOneById(pres.userId);
          }).then(function(user) {
            return pres.userName = user.firstName + ' ' + user.lastName;
          }));
        };
        for (_i = 0, _len = presentations.length; _i < _len; _i++) {
          pres = presentations[_i];
          _fn(pres);
        }
        return q.all(promises).then(function() {
          return res.view();
        });
      });
    }
  };

}).call(this);

/*
//@ sourceMappingURL=PresentationController.map
*/
