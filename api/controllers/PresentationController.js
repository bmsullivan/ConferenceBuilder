// Generated by CoffeeScript 1.7.1
(function() {
  var q;

  q = require('q');

  module.exports = {
    create: function(req, res, next) {
      var pres;
      if (req.method === 'GET') {
        res.locals.levels = [
          {
            name: 'Beginner'
          }, {
            name: 'Intermediate'
          }, {
            name: 'Advanced'
          }
        ];
        return Track.find().done(function(err, tracks) {
          if (err) {
            return next(err);
          }
          res.locals.tracks = tracks;
          return res.view();
        });
      } else {
        pres = {
          title: req.param('title'),
          trackId: req.param('trackId'),
          abstract: req.param('abstract'),
          level: req.param('level'),
          userId: req.user.id
        };
        return Presentation.create(pres).done(function(err, presentation) {
          if (err) {
            if (err.ValidationError) {
              res.locals.flash = {
                error: err.ValidationError
              };
              res.locals.presentation = pres;
              return res.view();
            }
          }
          Presentation.publishCreate(presentation.toObject());
          return res.redirect('/presentation');
        });
      }
    },
    find: function(req, res, next) {
      return Presentation.findOneById(req.param('id'), function(err, presentation) {
        if (err) {
          return next(err);
        }
        res.locals.presentation = presentation;
        return res.view();
      });
    },
    index: function(req, res, next) {
      var param;
      param = {};
      if (!req.user.isAdmin) {
        param.userId = req.user.id;
      }
      return Presentation.find(param).done(function(err, presentations) {
        var pres, promises, _fn, _i, _len;
        if (err) {
          return next(err);
        }
        res.locals.presentations = presentations;
        promises = [];
        _fn = function(pres) {
          return promises.push(Track.findOneById(pres.trackId).then(function(track) {
            return pres.trackName = track.name;
          }).then(function() {
            return User.findOneById(pres.userId);
          }).then(function(user) {
            return pres.userName = user.firstName + ' ' + user.lastName;
          }));
        };
        for (_i = 0, _len = presentations.length; _i < _len; _i++) {
          pres = presentations[_i];
          _fn(pres);
        }
        return q.all(promises).then(function() {
          return res.view();
        });
      });
    },
    update: function(req, res, next) {
      var pres;
      if (req.method === 'GET') {
        return Presentation.findOneById(req.param('id')).done(function(err, pres) {
          if (err) {
            return next(err);
          }
          if (!req.user.isAdmin && req.user.id !== pres.userId) {
            return res.forbidden('You are not permitted to perform this action');
          }
          res.locals.presentation = pres;
          return Track.find().done(function(trackErr, tracks) {
            if (trackErr) {
              return next(trackErr);
            }
            res.locals.tracks = tracks;
            res.locals.levels = [
              {
                name: 'Beginner'
              }, {
                name: 'Intermediate'
              }, {
                name: 'Advanced'
              }
            ];
            return res.view();
          });
        });
      } else {
        pres = {
          title: req.param('title'),
          trackId: req.param('trackId'),
          abstract: req.param('abstract'),
          level: req.param('level')
        };
        return Presentation.findOneById(req.param('id')).done(function(err, existing) {
          if (err) {
            return next(err);
          }
          if (!req.user.isAdmin && req.user.id !== existing.userId) {
            return res.forbidden('You are not permitted to perform this action');
          } else {
            return Presentation.update(req.param('id'), pres).done(function(err, presentations) {
              if (err) {
                if (err.ValidationError) {
                  res.locals.flash = {
                    error: err.ValidationError
                  };
                  res.locals.presentation = pres;
                  return res.view();
                }
              }
              return res.redirect('/presentation/' + presentations[0].id);
            });
          }
        });
      }
    },
    subscribe: function(req, res) {
      Presentation.subscribe(req.socket);
      return res.send(200);
    }
  };

}).call(this);

//# sourceMappingURL=PresentationController.map
